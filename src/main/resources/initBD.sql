CREATE TABLE продукты
(
    код_продукта SERIAL PRIMARY KEY,
    название     VARCHAR(100)   NOT NULL,
    цена         NUMERIC(10, 2) NOT NULL CHECK (цена > 0),
    остаток      INTEGER        NOT NULL CHECK (остаток >= 0),
    описание     VARCHAR(300),
    категория    VARCHAR(100)
);

CREATE TABLE поставщик
(
    номер_поставщика SERIAL PRIMARY KEY,
    адрес_склада     VARCHAR(150) NOT NULL
);

CREATE TABLE продукты_поставщик
(
    код_продукта                    INTEGER NOT NULL,
    номер_поставщика                INTEGER NOT NULL,
    количество_поставленного_товара INTEGER NOT NULL CHECK (количество_поставленного_товара > 0),
    PRIMARY KEY (код_продукта, номер_поставщика),
    FOREIGN KEY (код_продукта) REFERENCES продукты (код_продукта),
    FOREIGN KEY (номер_поставщика) REFERENCES поставщик (номер_поставщика)
);

CREATE TABLE клиенты
(
    код_клиента                     SERIAL PRIMARY KEY,
    фамилия_клиента                 VARCHAR(50) NOT NULL,
    имя_клиента                     VARCHAR(50) NOT NULL,
    отчество_клиента                VARCHAR(50) NOT NULL,
    номер_телефона_клиента          VARCHAR(15) NOT NULL UNIQUE,
    адрес_электронной_почты_клиента VARCHAR(30) NOT NULL UNIQUE,
    предпочтения                    VARCHAR(300)
);

CREATE TABLE заказы
(
    номер_заказа  SERIAL PRIMARY KEY,
    дата_заказа   TIMESTAMP   NOT NULL CHECK (дата_заказа >= '2010-01-01 00:00:00'),
    статус_заказа VARCHAR(20) NOT NULL,
    код_клиента   INTEGER     NOT NULL,
    FOREIGN KEY (код_клиента) REFERENCES клиенты (код_клиента) ON DELETE CASCADE
);

CREATE TABLE продажи
(
    код_продажи                    SERIAL PRIMARY KEY,
    код_продукта                   INTEGER NOT NULL,
    номер_заказа                   INTEGER,
    количество_проданного_продукта INTEGER NOT NULL CHECK (количество_проданного_продукта > 0),
    FOREIGN KEY (код_продукта) REFERENCES продукты (код_продукта),
    FOREIGN KEY (номер_заказа) REFERENCES заказы (номер_заказа) ON DELETE SET NULL ,
    UNIQUE (код_продукта, номер_заказа)
);

CREATE TABLE сроки_действия_скидок
(
    дата_начала    TIMESTAMP PRIMARY KEY,
    дата_окончания TIMESTAMP NOT NULL CHECK (дата_окончания > дата_начала)
);

CREATE TABLE скидки
(
    код_скидки         SERIAL PRIMARY KEY,
    название           VARCHAR(50)  NOT NULL,
    условия_применения VARCHAR(250) NOT NULL,
    дата_начала        TIMESTAMP    NOT NULL,
    процент_скидки     INTEGER      NOT NULL CHECK (процент_скидки > 0 AND процент_скидки < 100),
    FOREIGN KEY (дата_начала) REFERENCES сроки_действия_скидок (дата_начала)
);

CREATE TABLE список_акций
(
    код_записи   SERIAL PRIMARY KEY,
    код_продукта INTEGER NOT NULL,
    код_скидки   INTEGER NOT NULL,
    UNIQUE (код_продукта, код_скидки),
    FOREIGN KEY (код_продукта) REFERENCES продукты (код_продукта),
    FOREIGN KEY (код_скидки) REFERENCES скидки (код_скидки)
);

DROP TABLE IF EXISTS список_акций CASCADE;
DROP TABLE IF EXISTS скидки CASCADE;
DROP TABLE IF EXISTS сроки_действия_скидок CASCADE;
DROP TABLE IF EXISTS продажи CASCADE;
DROP TABLE IF EXISTS заказы CASCADE;
DROP TABLE IF EXISTS клиенты CASCADE;
DROP TABLE IF EXISTS продукты_поставщик CASCADE;
DROP TABLE IF EXISTS поставщик CASCADE;
DROP TABLE IF EXISTS продукты CASCADE;

TRUNCATE TABLE список_акций RESTART IDENTITY CASCADE;
TRUNCATE TABLE скидки RESTART IDENTITY CASCADE;
TRUNCATE TABLE сроки_действия_скидок RESTART IDENTITY CASCADE;
TRUNCATE TABLE продажи RESTART IDENTITY CASCADE;
TRUNCATE TABLE заказы RESTART IDENTITY CASCADE;
TRUNCATE TABLE клиенты RESTART IDENTITY CASCADE;
TRUNCATE TABLE продукты_поставщик RESTART IDENTITY CASCADE;
TRUNCATE TABLE поставщик RESTART IDENTITY CASCADE;
TRUNCATE TABLE продукты RESTART IDENTITY CASCADE;

INSERT INTO продукты (название, цена, остаток, описание, категория)
VALUES ('Аспирин', 50.00, 200, 'Таблетки от головной боли', 'Анальгетики'),
       ('Парацетамол', 70.00, 150, 'Таблетки от головной боли', 'Анальгетики'),
       ('Витамин C', 120.00, 300, 'Витамин для укрепления иммунитета', 'Витамины'),
       ('Антибиотик', 250.00, 100, 'Антибиотик широкого спектра действия', 'Антибиотики'),
       ('Антисептик', 80.00, 50, 'Средство для обработки ран', 'Антисептики'),
       ('Ибупрофен', 60.00, 180, 'Таблетки от головной боли', 'Анальгетики'),
       ('Цитрамон', 80.00, 120, 'Таблетки от головной боли', 'Анальгетики'),
       ('Витамин D', 130.00, 250, 'Витамин для укрепления костей', 'Витамины'),
       ('Амоксициллин', 200.00, 80, 'Антибиотик широкого спектра действия', 'Антибиотики'),
       ('Хлоргексидин', 90.00, 60, 'Средство для обработки ран', 'Антисептики'),
       ('Нурофен', 75.00, 150, 'Таблетки от головной боли', 'Анальгетики'),
       ('Панкреатин', 110.00, 200, 'Ферментный препарат', 'Ферменты'),
       ('Омепразол', 140.00, 100, 'Препарат для лечения язвы', 'Гастроэнтерология'),
       ('Аскорбиновая кислота', 100.00, 300, 'Витамин для укрепления иммунитета', 'Витамины'),
       ('Левомицетин', 180.00, 70, 'Антибиотик широкого спектра действия', 'Антибиотики');

INSERT INTO поставщик (адрес_склада)
VALUES ('ул. Ленина, 10'),
       ('ул. Пушкина, 20'),
       ('ул. Гоголя, 30'),
       ('ул. Советская, 40'),
       ('ул. Мира, 50'),
       ('ул. Лесная, 60'),
       ('ул. Центральная, 70'),
       ('ул. Садовая, 80'),
       ('ул. Парковая, 90'),
       ('ул. Набережная, 100'),
       ('ул. Заречная, 110'),
       ('ул. Октябрьская, 120'),
       ('ул. Юбилейная, 130'),
       ('ул. Спортивная, 140'),
       ('ул. Школьная, 150');

INSERT INTO продукты_поставщик (код_продукта, номер_поставщика, количество_поставленного_товара)
VALUES (1, 1, 200),
       (2, 2, 150),
       (3, 3, 300),
       (4, 4, 100),
       (5, 5, 50),
       (6, 6, 180),
       (7, 7, 120),
       (8, 8, 250),
       (9, 9, 80),
       (10, 10, 60),
       (11, 11, 150),
       (12, 12, 200),
       (13, 13, 100),
       (14, 14, 300),
       (15, 15, 70);

INSERT INTO клиенты (фамилия_клиента, имя_клиента, отчество_клиента, номер_телефона_клиента,
                     адрес_электронной_почты_клиента, предпочтения)
VALUES ('Иванов', 'Иван', 'Иванович', '+79111234567', 'ivanov@example.com', 'Анальгетики'),
       ('Петров', 'Петр', 'Петрович', '+79117654321', 'petrov@example.com', 'Витамины'),
       ('Сидоров', 'Сидор', 'Сидорович', '+79119876543', 'sidorov@example.com', 'Антибиотики'),
       ('Кузнецов', 'Алексей', 'Алексеевич', '+79112345678', 'kuznetsov@example.com', 'Анальгетики'),
       ('Васильев', 'Василий', 'Васильевич', '+79113456789', 'vasilev@example.com', 'Витамины'),
       ('Михайлов', 'Михаил', 'Михайлович', '+79114567890', 'mikhailov@example.com', 'Антибиотики'),
       ('Смирнов', 'Сергей', 'Сергеевич', '+79115678901', 'smirnov@example.com', 'Анальгетики'),
       ('Попов', 'Павел', 'Павлович', '+79116789012', 'popov@example.com', 'Витамины'),
       ('Соколов', 'Семен', 'Семенович', '+79117890123', 'sokolov@example.com', 'Антибиотики'),
       ('Лебедев', 'Лев', 'Левович', '+79118901234', 'lebedev@example.com', 'Анальгетики'),
       ('Козлов', 'Константин', 'Константинович', '+79119012345', 'kozlov@example.com', 'Витамины'),
       ('Новиков', 'Николай', 'Николаевич', '+79110123456', 'novikov@example.com', 'Антибиотики'),
       ('Морозов', 'Максим', 'Максимович', '+79911234567', 'morozov@example.com', 'Анальгетики'),
       ('Алексеев', 'Алексей', 'Алексеевич', '+79112345679', 'alekseev@example.com', 'Витамины'),
       ('Федоров', 'Федор', 'Федорович', '+79113456780', 'fedorov@example.com', 'Антибиотики');

INSERT INTO заказы (дата_заказа, статус_заказа, код_клиента)
VALUES ('2024-12-01 10:00:00', 'Оплачен', 1),
       ('2024-12-02 10:00:00', 'Оплачен', 2),
       ('2024-12-03 10:00:00', 'Оплачен', 3),
       ('2024-12-04 10:00:00', 'Оплачен', 4),
       ('2024-12-05 10:00:00', 'Оплачен', 5),
       ('2024-12-06 10:00:00', 'Оплачен', 6),
       ('2024-12-01 11:00:00', 'Оплачен', 7),
       ('2024-12-02 11:00:00', 'Оплачен', 8),
       ('2024-12-03 11:00:00', 'Оплачен', 9),
       ('2024-12-04 11:00:00', 'Оплачен', 10),
       ('2024-12-05 11:00:00', 'Оплачен', 11),
       ('2024-12-06 11:00:00', 'Оплачен', 12),
       ('2024-12-01 12:00:00', 'Оплачен', 13),
       ('2024-12-02 12:00:00', 'Оплачен', 14),
       ('2024-12-03 12:00:00', 'Оплачен', 15);

INSERT INTO продажи (код_продукта, номер_заказа, количество_проданного_продукта)
VALUES (1, 1, 50),
       (2, 2, 30),
       (3, 3, 20),
       (4, 4, 10),
       (5, 5, 25),
       (6, 6, 40),
       (7, 7, 25),
       (8, 8, 30),
       (9, 9, 20),
       (10, 10, 15),
       (11, 11, 35),
       (12, 12, 45),
       (13, 13, 25),
       (14, 14, 30),
       (15, 15, 20);

INSERT INTO сроки_действия_скидок (дата_начала, дата_окончания)
VALUES ('2024-12-01 00:00:00', '2024-12-15 23:59:59'),
       ('2024-12-02 00:00:00', '2024-12-16 23:59:59'),
       ('2024-12-03 00:00:00', '2024-12-17 23:59:59'),
       ('2024-12-04 00:00:00', '2024-12-18 23:59:59'),
       ('2024-12-05 00:00:00', '2024-12-19 23:59:59'),
       ('2024-12-06 00:00:00', '2024-12-20 23:59:59'),
       ('2024-12-01 00:00:01', '2024-12-15 23:59:59'),
       ('2024-12-01 00:00:02', '2024-12-16 23:59:59'),
       ('2024-12-01 00:00:03', '2024-12-17 23:59:59'),
       ('2024-12-01 00:00:04', '2024-12-18 23:59:59'),
       ('2024-12-01 00:00:05', '2024-12-19 23:59:59'),
       ('2024-12-01 00:00:06', '2024-12-20 23:59:59'),
       ('2024-12-01 00:00:07', '2024-12-15 23:59:59'),
       ('2024-12-01 00:00:08', '2024-12-16 23:59:59'),
       ('2024-12-01 00:00:09', '2024-12-17 23:59:59');

INSERT INTO скидки (название, условия_применения, дата_начала, процент_скидки)
VALUES ('Скидка на анальгетики', 'При покупке от 3 упаковок', '2024-12-01 00:00:00', 10),
       ('Скидка на витамины', 'При покупке от 2 упаковок', '2024-12-02 00:00:00', 15),
       ('Скидка на антибиотики', 'При покупке от 3 упаковок', '2024-12-03 00:00:00', 20),
       ('Скидка на антисептики', 'При покупке от 2 упаковок', '2024-12-04 00:00:00', 25),
       ('Скидка на ферменты', 'При покупке от 3 упаковок', '2024-12-05 00:00:00', 30),
       ('Скидка на гастроэнтерологию', 'При покупке от 2 упаковок', '2024-12-06 00:00:00', 35),
       ('Скидка на анальгетики', 'При покупке от 4 упаковок', '2024-12-01 00:00:01', 10),
       ('Скидка на витамины', 'При покупке от 3 упаковок', '2024-12-01 00:00:02', 15),
       ('Скидка на антибиотики', 'При покупке от 4 упаковок', '2024-12-01 00:00:03', 20),
       ('Скидка на антисептики', 'При покупке от 3 упаковок', '2024-12-01 00:00:04', 25),
       ('Скидка на ферменты', 'При покупке от 4 упаковок', '2024-12-01 00:00:05', 30),
       ('Скидка на гастроэнтерологию', 'При покупке от 3 упаковок', '2024-12-01 00:00:06', 35),
       ('Скидка на анальгетики', 'При покупке от 5 упаковок', '2024-12-01 00:00:07', 10),
       ('Скидка на витамины', 'При покупке от 4 упаковок', '2024-12-01 00:00:08', 15),
       ('Скидка на антибиотики', 'При покупке от 5 упаковок', '2024-12-01 00:00:09', 20);

INSERT INTO список_акций (код_продукта, код_скидки)
VALUES (1, 1),
       (2, 2),
       (3, 3),
       (4, 4),
       (5, 5),
       (6, 6),
       (7, 7),
       (8, 8),
       (9, 9),
       (10, 10),
       (11, 11),
       (12, 12),
       (13, 13),
       (14, 14),
       (15, 15);

WITH продажи_со_скидкой AS (SELECT пр.код_продукта,
                                   SUM(пр.количество_проданного_продукта)                                           AS количество_проданного_продукта,
                                   SUM(пр.количество_проданного_продукта * п.цена * (100 - с.процент_скидки) /
                                       100)                                                                         AS общая_стоимость_продаж
                            FROM продажи пр
                                     JOIN
                                 продукты п ON пр.код_продукта = п.код_продукта
                                     JOIN
                                 список_акций са ON пр.код_продукта = са.код_продукта
                                     JOIN
                                 скидки с ON са.код_скидки = с.код_скидки
                                     JOIN
                                 сроки_действия_скидок ср ON с.дата_начала = ср.дата_начала
                            WHERE ср.дата_окончания >= CURRENT_DATE
                            GROUP BY пр.код_продукта)
SELECT п.название                                                     AS название_продукта,
       с.название                                                     AS название_скидки,
       с.условия_применения,
       с.процент_скидки,
       ср.дата_начала,
       ср.дата_окончания,
       COALESCE(продажи_со_скидкой.количество_проданного_продукта, 0) AS количество_проданных_единиц,
       COALESCE(продажи_со_скидкой.общая_стоимость_продаж, 0)         AS общая_стоимость_продаж
FROM продукты п
         JOIN
     список_акций са ON п.код_продукта = са.код_продукта
         JOIN
     скидки с ON са.код_скидки = с.код_скидки
         JOIN
     сроки_действия_скидок ср ON с.дата_начала = ср.дата_начала
         LEFT JOIN
     продажи_со_скидкой ON п.код_продукта = продажи_со_скидкой.код_продукта
WHERE ср.дата_окончания >= CURRENT_DATE
ORDER BY с.процент_скидки DESC;

WITH прогноз_продаж AS (SELECT п.код_продукта,
                               п.название                                                                       AS название_продукта,
                               AVG(пр.количество_проданного_продукта)                                           AS среднее_количество_проданных_единиц,
                               AVG(пр.количество_проданного_продукта * п.цена * (100 - с.процент_скидки) /
                                   100)                                                                         AS средняя_стоимость_продаж
                        FROM продажи пр
                                 JOIN
                             продукты п ON пр.код_продукта = п.код_продукта
                                 JOIN
                             список_акций са ON пр.код_продукта = са.код_продукта
                                 JOIN
                             скидки с ON са.код_скидки = с.код_скидки
                                 JOIN
                             сроки_действия_скидок ср ON с.дата_начала = ср.дата_начала
                        WHERE ср.дата_окончания >= CURRENT_DATE
                        GROUP BY п.код_продукта, п.название),
     прогноз_на_месяц AS (SELECT пп.код_продукта,
                                 пп.название_продукта,
                                 пп.среднее_количество_проданных_единиц * 30 AS прогнозируемое_количество_проданных_единиц,
                                 пп.средняя_стоимость_продаж * 30            AS прогнозируемая_стоимость_продаж
                          FROM прогноз_продаж пп)
SELECT пп.название_продукта,
       пп.прогнозируемое_количество_проданных_единиц,
       пп.прогнозируемая_стоимость_продаж
FROM прогноз_на_месяц пп
ORDER BY пп.прогнозируемая_стоимость_продаж DESC;
